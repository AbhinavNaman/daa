import java.util.*;

// Class to represent a graph
class Graph {
    private int V; // Number of vertices
    private LinkedList<Integer>[] adj; // Adjacency list

    // Constructor
    public Graph(int v) {
        V = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; ++i)
            adj[i] = new LinkedList<>();
    }

    // Function to add an edge to the graph
    public void addEdge(int v, int w) {
        adj[v].add(w);
    }

    // Recursive function for DFS traversal
    private void DFSUtil(int v, boolean[] visited) {
        // Mark the current node as visited and print it
        visited[v] = true;
        System.out.print(v + " ");

        // Recur for all the vertices adjacent to this vertex
        for (Integer neighbor : adj[v]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);
            }
        }
    }

    // Function to perform DFS traversal starting from a given source vertex (recursive)
    public void DFS(int s) {
        boolean[] visited = new boolean[V]; // Mark all vertices as not visited
        System.out.println("DFS starting from vertex " + s + ":");
        DFSUtil(s, visited);
    }

    // Function to perform DFS traversal starting from a given source vertex (iterative)
    public void DFSIterative(int s) {
        boolean[] visited = new boolean[V]; // Mark all vertices as not visited
        System.out.println("DFS (Iterative) starting from vertex " + s + ":");

        // Create a stack for DFS
        Stack<Integer> stack = new Stack<>();

        // Push the current source node onto the stack
        stack.push(s);

        while (!stack.isEmpty()) {
            // Pop a vertex from the stack and print it
            s = stack.pop();
            if (!visited[s]) {
                System.out.print(s + " ");
                visited[s] = true;
            }

            // Get all adjacent vertices of the popped vertex
            // If an adjacent vertex has not been visited, then push it to the stack
            for (Integer neighbor : adj[s]) {
                if (!visited[neighbor]) {
                    stack.push(neighbor);
                }
            }
        }
    }
}

public class DFSTest {
    public static void main(String[] args) {
        Graph g = new Graph(7);

        // Add edges to the graph
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 3);
        g.addEdge(1, 4);
        g.addEdge(2, 5);
        g.addEdge(2, 6);

        int startVertex = 0;

        g.DFS(startVertex); // Recursive DFS
        System.out.println(); // Newline for separation
        g.DFSIterative(startVertex); // Iterative DFS
    }
}
