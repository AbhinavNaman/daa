public class Warshall {
    // Function to find the transitive closure of a directed graph
    static void transitiveClosure(int graph[][], int V) {
        int reach[][] = new int[V][V];

        // Initialize the reach matrix with the graph values
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                reach[i][j] = graph[i][j];
            }
        }

        // Update the reach matrix using Warshall's Algorithm
        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    reach[i][j] = (reach[i][j] != 0) || ((reach[i][k] != 0) && (reach[k][j] != 0)) ? 1 : 0;
                }
            }
        }

        // Print the transitive closure
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                System.out.print(reach[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int V = 4; // Number of vertices
        int graph[][] = {
            {1, 1, 0, 1},
            {0, 1, 1, 0},
            {0, 0, 1, 1},
            {0, 0, 0, 1}
        };

        // Call the transitive closure algorithm
        transitiveClosure(graph, V);
    }
}
