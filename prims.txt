import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }

    @Override
    public int compareTo(Edge other) {
        return this.weight - other.weight;
    }
}

class Graph {
    private int V, E;
    private Edge[] edges;

    public Graph(int V, int E) {
        this.V = V;
        this.E = E;
        edges = new Edge[E];
        for (int i = 0; i < E; i++) {
            edges[i] = new Edge(0, 0, 0);
        }
    }

    public void addEdge(int i, int src, int dest, int weight) {
        edges[i].src = src;
        edges[i].dest = dest;
        edges[i].weight = weight;
    }

    private int find(int[] parent, int vertex) {
        if (parent[vertex] == -1) {
            return vertex;
        }
        return find(parent, parent[vertex]);
    }

    private void union(int[] parent, int x, int y) {
        int xRoot = find(parent, x);
        int yRoot = find(parent, y);
        parent[xRoot] = yRoot;
    }

    public void kruskalMST() {
        Arrays.sort(edges);

        Edge[] result = new Edge[V - 1];
        int[] parent = new int[V];
        Arrays.fill(parent, -1);

        int i = 0; // Index used to count edges added to the MST
        int e = 0; // Index used to iterate through sorted edges

        while (i < V - 1) {
            Edge nextEdge = edges[e++];
            int x = find(parent, nextEdge.src);
            int y = find(parent, nextEdge.dest);

            if (x != y) {
                result[i++] = nextEdge;
                union(parent, x, y);
            }
        }

        System.out.println("Minimum Spanning Tree:");
        for (i = 0; i < V - 1; i++) {
            System.out.println("Edge: " + result[i].src + " - " + result[i].dest + " Weight: " + result[i].weight);
        }
    }
}

public class KruskalTest {
    public static void main(String[] args) {
        int V = 4; // Number of vertices
        int E = 5; // Number of edges
        Graph graph = new Graph(V, E);

        // Add edges to the graph
        graph.addEdge(0, 0, 1, 10);
        graph.addEdge(1, 0, 2, 6);
        graph.addEdge(2, 0, 3, 5);
        graph.addEdge(3, 1, 3, 15);
        graph.addEdge(4, 2, 3, 4);

        graph.kruskalMST();
    }
}
